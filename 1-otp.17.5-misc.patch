--- lib/sasl/src/alarm_handler.erl.orig	2015-06-07 12:33:16.444120152 -0400
+++ lib/sasl/src/alarm_handler.erl	2015-06-07 12:33:22.224209523 -0400
@@ -59,7 +59,12 @@
 %% Returns: [{AlarmId, AlarmDesc}]
 %%-----------------------------------------------------------------
 get_alarms() ->
-    gen_event:call(alarm_handler, alarm_handler, get_alarms).
+    case gen_event:which_handlers(alarm_handler) of
+    [M | _] ->
+        gen_event:call(alarm_handler, M, get_alarms);
+    [] ->
+        []
+    end.
 
 add_alarm_handler(Module) when is_atom(Module) ->
     gen_event:add_handler(alarm_handler, Module, []).
--- lib/stdlib/src/edlin.erl.orig	2015-06-07 12:33:16.444120152 -0400
+++ lib/stdlib/src/edlin.erl	2015-06-07 12:33:22.224209523 -0400
@@ -74,6 +74,12 @@
 
 edit([C|Cs], P, Line, {blink,_}, [_|Rs]) ->	%Remove blink here
     edit([C|Cs], P, Line, none, Rs);
+edit("\e[3~"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % `Del' key
+    edit([$\^D|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5D"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^<-  move left one word
+    edit([$B|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5C"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^->  move right one word
+    edit([$F|Cs], P, {Bef,Aft}, Prefix, Rs);
 edit([C|Cs], P, {Bef,Aft}, Prefix, Rs0) ->
     case key_map(C, Prefix) of
 	meta ->
@@ -181,7 +187,7 @@
 key_map($\^K, none) -> kill_line;
 key_map($\r, none) -> new_line;
 key_map($\^T, none) -> transpose_char;
-key_map($\^U, none) -> ctlu;
+key_map($\^U, none) -> kill_full_line;
 key_map($\^], none) -> auto_blink;
 key_map($\^X, none) -> ctlx;
 key_map($\^Y, none) -> yank;
@@ -214,6 +220,8 @@
 key_map($[, meta) -> meta_left_sq_bracket;
 key_map($D, meta_left_sq_bracket) -> backward_char;
 key_map($C, meta_left_sq_bracket) -> forward_char;
+key_map($H, meta_left_sq_bracket) -> beginning_of_line; % Home key
+key_map($F, meta_left_sq_bracket) -> end_of_line;       % End key
 % support a few <CTRL>+<CURSOR LEFT|RIGHT> combinations...
 %  - forward:  \e\e[C, \e[5C, \e[1;5C
 %  - backward: \e\e[D, \e[5D, \e[1;5D
@@ -363,6 +371,9 @@
 do_op(kill_line, Bef, Aft, Rs) ->
     put(kill_buffer, Aft),
     {{Bef,[]},[{delete_chars,length(Aft)}|Rs]};
+do_op(kill_full_line, Bef, Aft, Rs) ->
+    put(kill_buffer, reverse(Bef)++Aft),
+    {{[],[]},[{delete_chars,-length(Bef)},{delete_chars,length(Aft)}|Rs]};
 do_op(yank, Bef, [], Rs) ->
     Kill = get(kill_buffer),
     {{reverse(Kill, Bef),[]},[{put_chars, unicode,Kill}|Rs]};
--- lib/syntax_tools/src/erl_prettypr.erl.orig	2015-06-07 12:33:16.447453524 -0400
+++ lib/syntax_tools/src/erl_prettypr.erl	2015-06-07 12:33:22.224209523 -0400
@@ -685,10 +685,17 @@
 
 	binary ->
 	    Ctxt1 = reset_prec(Ctxt),
-	    Es = seq(erl_syntax:binary_fields(Node),
-		     floating(text(",")), Ctxt1, fun lay/2),
+	    BinEls = erl_syntax:binary_fields(Node),
+	    Ints = lists:map(fun({integer,_,I}) -> I; (X) -> X end,
+	        [erl_syntax:binary_field_body(I) || I <- BinEls]),
+	    Es = case io_lib:printable_list(Ints) of
+	        true ->
+	            lay(erl_syntax:string(Ints), Ctxt1);
+	        false ->
+	            par(seq(BinEls, floating(text(",")), Ctxt1, fun lay/2))
+	    end,
 	    beside(floating(text("<<")),
-		   beside(par(Es), floating(text(">>"))));
+		   beside(Es, floating(text(">>"))));
 
 	binary_field ->
 	    Ctxt1 = set_prec(Ctxt, max_prec()),
