diff --git a/erts/configure.in b/erts/configure.in
index 22ca7ec..d98ca81 100644
--- a/erts/configure.in
+++ b/erts/configure.in
@@ -2229,7 +2229,7 @@ fi
 dnl Need by run_erl.
 AC_CHECK_FUNCS([openpty])
 
-AC_CHECK_HEADERS(net/if_dl.h ifaddrs.h netpacket/packet.h)
+AC_CHECK_HEADERS(net/if_dl.h ifaddrs.h netpacket/packet.h sys/un.h)
 AC_CHECK_FUNCS([getifaddrs])
 
 dnl Checks for variables in6addr_any and in6addr_loopback,
diff --git a/erts/doc/src/erlang.xml b/erts/doc/src/erlang.xml
index 37f0aa2..31cd922 100644
--- a/erts/doc/src/erlang.xml
+++ b/erts/doc/src/erlang.xml
@@ -898,6 +898,10 @@
 	      case when <c>packet_size</c> itself is not set. This usage is
 	      only intended for backward compatibility.</p>
               </item>
+              <tag><c>{line_delimiter, 0 &le; char() &le; 255}</c></tag>
+              <item><p>For packet type <c>line</c>, sets delimiting character.
+                Default <c>$\n</c>.</p>
+              </item>
             </taglist>
         <pre>
 > <input>erlang:decode_packet(1,&lt;&lt;3,"abcd"&gt;&gt;,[]).</input>
diff --git a/erts/emulator/beam/atom.names b/erts/emulator/beam/atom.names
index f9a2f3e..190e781 100644
--- a/erts/emulator/beam/atom.names
+++ b/erts/emulator/beam/atom.names
@@ -321,6 +321,7 @@ atom ldflags
 atom Le='=<'
 atom lf
 atom line
+atom line_delimiter
 atom line_length
 atom linked_in_driver
 atom links
diff --git a/erts/emulator/beam/erl_bif_port.c b/erts/emulator/beam/erl_bif_port.c
index 3ff54c7..e47d7bc 100644
--- a/erts/emulator/beam/erl_bif_port.c
+++ b/erts/emulator/beam/erl_bif_port.c
@@ -1329,7 +1329,8 @@ BIF_RETTYPE decode_packet_3(BIF_ALIST_3)
     ErlSubBin* rest;
     Eterm res;
     Eterm options;
-    int code;
+    int   code;
+    char  delimiter = '\n';
 
     if (!is_binary(BIF_ARG_2) || 
         (!is_list(BIF_ARG_3) && !is_nil(BIF_ARG_3))) {
@@ -1370,6 +1371,11 @@ BIF_RETTYPE decode_packet_3(BIF_ALIST_3)
                 case am_line_length:
                     trunc_len = val;
                     goto next_option;
+                case am_line_delimiter:
+                    if (type == TCP_PB_LINE_LF && val >= 0 && val <= 255) {
+                        delimiter = (char)val;
+                        goto next_option;
+                    }
                 }
             }
         }
@@ -1390,7 +1396,7 @@ BIF_RETTYPE decode_packet_3(BIF_ALIST_3)
         pca.aligned_ptr = bin_ptr;
     }
     packet_sz = packet_get_length(type, (char*)pca.aligned_ptr, pca.bin_sz,
-                                  max_plen, trunc_len, &http_state);
+                                  max_plen, trunc_len, delimiter, &http_state);
     if (!(packet_sz > 0 && packet_sz <= pca.bin_sz)) {
         if (packet_sz < 0) {
 	    goto error;
diff --git a/erts/emulator/beam/packet_parser.c b/erts/emulator/beam/packet_parser.c
index 2dd421a..a737a86 100644
--- a/erts/emulator/beam/packet_parser.c
+++ b/erts/emulator/beam/packet_parser.c
@@ -256,6 +256,7 @@ int packet_get_length(enum PacketParseType htype,
                       const char* ptr, unsigned n, /* Bytes read so far */
                       unsigned max_plen,     /* Max packet length, 0=no limit */
                       unsigned trunc_len,    /* Truncate (lines) if longer, 0=no limit */
+                      char     delimiter,    /* Line delimiting character */
                       int*     statep)       /* Protocol specific state */
 {
     unsigned hlen, plen;
@@ -299,9 +300,9 @@ int packet_get_length(enum PacketParseType htype,
         goto remain;
 
     case TCP_PB_LINE_LF: {
-        /* TCP_PB_LINE_LF:  [Data ... \n]  */
+        /* TCP_PB_LINE_LF:  [Data ... Delimiter]  */
         const char* ptr2;
-        if ((ptr2 = memchr(ptr, '\n', n)) == NULL) {
+        if ((ptr2 = memchr(ptr, delimiter, n)) == NULL) {
             if (n > max_plen && max_plen != 0) { /* packet full */
                 DEBUGF((" => packet full (no NL)=%d\r\n", n));
                 goto error;
diff --git a/erts/emulator/beam/packet_parser.h b/erts/emulator/beam/packet_parser.h
index ff158ff..717d905 100644
--- a/erts/emulator/beam/packet_parser.h
+++ b/erts/emulator/beam/packet_parser.h
@@ -105,7 +105,8 @@ int packet_get_length(enum PacketParseType htype,
 		      const char* ptr, unsigned n,  /* Bytes read so far */
 		      unsigned max_plen,      /* Packet max length, 0=no limit */
 		      unsigned trunc_len,     /* Truncate (lines) if longer, 0=no limit */
-		      int* statep);           /* Internal protocol state */
+		      char     delimiter,     /* Line delimiting character */
+		      int*     statep);       /* Internal protocol state */
 
 ERTS_GLB_INLINE
 void packet_get_body(enum PacketParseType htype,
diff --git a/erts/emulator/drivers/common/efile_drv.c b/erts/emulator/drivers/common/efile_drv.c
index 8aff6c1..bc42a87 100644
--- a/erts/emulator/drivers/common/efile_drv.c
+++ b/erts/emulator/drivers/common/efile_drv.c
@@ -78,6 +78,7 @@
 
 #define FILE_OPT_DELAYED_WRITE 0
 #define FILE_OPT_READ_AHEAD    1
+#define FILE_OPT_DELIMITER     2
 
 /* IPREAD variants */
 
@@ -324,6 +325,7 @@ typedef struct {
     ErlDrvPDL       q_mtx;    /* Mutex for the driver queue, known by the emulator. Also used for
 				 mutual exclusion when accessing field(s) below. */
     size_t          write_buffered;
+    char            delimiter;  /* read_line delimiter (def: '\n') */
 #ifdef USE_VM_PROBES
     int             idnum;      /* Unique ID # for this driver thread/desc */
     char            port_str[DTRACE_TERM_BUF_SIZE];
@@ -470,6 +472,7 @@ struct t_data
 	    size_t        read_size; /* in - out */
 	    size_t        nl_pos; /* out */
 	    short         nl_skip; /* out, 0 or 1 */
+	    char          delimiter;
 #if !ALWAYS_READ_LINE_AHEAD
 	    short         read_ahead; /* in, bool */
 #endif
@@ -805,6 +808,7 @@ file_start(ErlDrvPort port, char* command)
     desc->write_error = 0;
     MUTEX_INIT(desc->q_mtx, port); /* Refc is one, referenced by emulator now */
     desc->write_buffered = 0;
+    desc->delimiter = '\n';        /* default line delimiter is '\n' */
 #ifdef  USE_VM_PROBES
     dtrace_drvport_str(port, desc->port_str);
     get_dt_private(0);           /* throw away return value */
@@ -1223,15 +1227,17 @@ static void invoke_read_line(void *data)
 				&read_size);
 	}
 	if ( (d->result_ok = status)) {
+	    char delim   = d->c.read_line.delimiter;
 	    void *nl_ptr = memchr((d->c.read_line.binp)->orig_bytes + 
-				  d->c.read_line.read_offset + d->c.read_line.read_size,'\n',read_size);
+				  d->c.read_line.read_offset + d->c.read_line.read_size,
+                                  delim,read_size);
 	    ASSERT(read_size <= size);
 	    d->c.read_line.read_size += read_size;
 	    if (nl_ptr != NULL) {
 		/* If found, we're done */
 		d->c.read_line.nl_pos = ((char *) nl_ptr) - 
 		    ((char *) ((d->c.read_line.binp)->orig_bytes)) + 1;
-		if (d->c.read_line.nl_pos > 1 &&
+		if (delim == '\n' && d->c.read_line.nl_pos > 1 &&
 		    *(((char *) nl_ptr) - 1) == '\r') {
 		    --d->c.read_line.nl_pos;
 		    *(((char *) nl_ptr) - 1) = '\n';
@@ -3430,13 +3436,15 @@ file_outputv(ErlDrvData e, ErlIOVec *ev) {
 	}
 	if (desc->read_size > 0) {
 	    /* look for '\n' in what we'we already got */
-	    void *nl_ptr = memchr(desc->read_binp->orig_bytes + desc->read_offset,'\n',desc->read_size);
+	    char delim   = desc->delimiter;
+	    void *nl_ptr = memchr(desc->read_binp->orig_bytes + desc->read_offset,delim,desc->read_size);
 	    if (nl_ptr != NULL) {
 		/* If found, we're done */
 		int skip = 0;
 		size_t size = ((char *) nl_ptr) - 
 		    ((char *) (desc->read_binp->orig_bytes + desc->read_offset)) + 1;
 		if (size > 1 &&
+		    delim == '\n' &&
 		    *(((char *) nl_ptr) - 1) == '\r') {
 		    *(((char *) nl_ptr) - 1) = '\n';		    
 		    skip = 1;
@@ -3474,6 +3482,7 @@ file_outputv(ErlDrvData e, ErlIOVec *ev) {
 	d->c.read_line.binp = desc->read_binp;
 	d->c.read_line.read_offset = desc->read_offset;
 	d->c.read_line.read_size = desc->read_size;
+	d->c.read_line.delimiter = desc->delimiter;
 #ifdef USE_VM_PROBES
 	dt_i1 = d->fd;
 	dt_i2 = d->flags;
@@ -4096,6 +4105,16 @@ file_outputv(ErlDrvData e, ErlIOVec *ev) {
 	    TRACE_C('K');
 	    reply_ok(desc);
 	} goto done;
+	case FILE_OPT_DELIMITER: {
+	    char delim;
+	    if (ev->size != 1+1+1
+	        || !EV_GET_CHAR(ev, &delim, &p, &q)) {
+		reply_posix_error(desc, EINVAL);
+		goto done;
+	    }
+	    desc->delimiter = delim;
+	    reply_ok(desc);
+	} goto done;
 	default:
 	    reply_posix_error(desc, EINVAL);
 	    goto done;
diff --git a/erts/emulator/drivers/common/inet_drv.c b/erts/emulator/drivers/common/inet_drv.c
index 549de65..a0b711e 100644
--- a/erts/emulator/drivers/common/inet_drv.c
+++ b/erts/emulator/drivers/common/inet_drv.c
@@ -58,6 +58,9 @@
 #ifdef HAVE_NETPACKET_PACKET_H
 #include <netpacket/packet.h>
 #endif
+#ifdef HAVE_SYS_UN_H
+#include <sys/un.h>
+#endif
 
 /* All platforms fail on malloc errors. */
 #define FATAL_MALLOC
@@ -747,6 +750,7 @@ static int my_strncasecmp(const char *s1, const char *s2, size_t n)
 #define INET_AF_INET6       2
 #define INET_AF_ANY         3 /* INADDR_ANY or IN6ADDR_ANY_INIT */
 #define INET_AF_LOOPBACK    4 /* INADDR_LOOPBACK or IN6ADDR_LOOPBACK_INIT */
+#define INET_AF_LOCAL       5
 
 /* open and INET_REQ_GETTYPE enumeration */
 #define INET_TYPE_STREAM    1
@@ -885,6 +889,7 @@ static int my_strncasecmp(const char *s1, const char *s2, size_t n)
 #define INET_LOPT_MSGQ_LOWTRMRK     37  /* set local msgq low watermark */
 #define INET_LOPT_NETNS             38  /* Network namespace pathname */
 #define INET_LOPT_TCP_SHOW_ECONNRESET 39  /* tell user about incoming RST */
+#define INET_LOPT_LINE_DELIM        40  /* Line delimiting char */
 /* SCTP options: a separate range, from 100: */
 #define SCTP_OPT_RTOINFO		100
 #define SCTP_OPT_ASSOCINFO		101
@@ -1031,19 +1036,29 @@ typedef union {
 #ifdef HAVE_IN6
     struct sockaddr_in6 sai6;
 #endif
+#ifdef HAVE_SYS_UN_H
+    struct sockaddr_un sal;
+#endif
 } inet_address;
 
 
 /* for AF_INET & AF_INET6 */
 #define inet_address_port(x) ((x)->sai.sin_port)
 
+#ifdef HAVE_SYS_UN_H
+#define localaddrlen(family, data) \
+    ((family == AF_LOCAL) ? *(unsigned char*)(data) : 0)
+#else
+    0
+#endif
+
 #if defined(HAVE_IN6) && defined(AF_INET6)
-#define addrlen(family) \
+#define addrlen(family, data) \
    ((family == AF_INET) ? sizeof(struct in_addr) : \
-    ((family == AF_INET6) ? sizeof(struct in6_addr) : 0))
+    ((family == AF_INET6) ? sizeof(struct in6_addr) : localaddrlen(family, data)))
 #else
-#define addrlen(family) \
-   ((family == AF_INET) ? sizeof(struct in_addr) : 0)
+#define addrlen(family, data) \
+   ((family == AF_INET) ? sizeof(struct in_addr) : localaddrlen(family, data))
 #endif
 
 typedef struct _multi_timer_data {
@@ -1154,6 +1169,7 @@ typedef struct {
 #else
     Uint32        send_oct[2];  /* number of octets sent, 64 bits */
 #endif
+    char          delimiter;    /* Line delimiting character (def: '\n')  */
     unsigned long send_cnt;     /* number of packets sent */
     unsigned long send_max;     /* maximum packet send */
     double send_avg;            /* average packet size sent */
@@ -1726,6 +1742,12 @@ static int load_ip_address(ErlDrvTermData* spec, int i, int family, char* buf)
 	spec[i++] = 8;
     }
 #endif
+#ifdef HAVE_SYS_UN_H
+    else if (family == AF_LOCAL) {
+	int len = *(unsigned char*)buf++;
+	i = LOAD_STRING(spec, i, buf, len);
+    }
+#endif
     else {
 	spec[i++] = ERL_DRV_TUPLE;
 	spec[i++] = 0;
@@ -3571,10 +3593,11 @@ static int tcp_error_message(tcp_descriptor* desc, int err)
 #ifdef HAVE_UDP
 /* 
 ** active mode message:
-**        {udp,  S, IP, Port, [H1,...Hsz | Data]} or
-**	  {sctp, S, IP, Port, {[AncilData],  Event_or_Data}}
+**    {udp,  S, IP, Port, [H1,...Hsz | Data]} or
+**    {sctp, S, IP, Port, {[AncilData],  Event_or_Data}}
 ** where
 ** 	  [H1,...,HSz] are msg headers (without IP/Port, UDP only),
+**    [AddrLen, H2,...,HSz] are msg headers for UDP AF_LOCAL only
 **	  Data  : List() | Binary()
 */
 static int packet_binary_message
@@ -3584,6 +3607,7 @@ static int packet_binary_message
     ErlDrvTermData spec [PACKET_ERL_DRV_TERM_DATA_LEN];
     int i = 0;
     int alen;
+    char* data = bin->orig_bytes+offs;
 
     DEBUGF(("packet_binary_message(%ld): len = %d\r\n",
 	   (long)desc->port, len));
@@ -3594,10 +3618,15 @@ static int packet_binary_message
 #   endif
     i = LOAD_PORT(spec, i, desc->dport);   		      /* S	  */
     
-    alen = addrlen(desc->sfamily);
-    i = load_ip_address(spec, i, desc->sfamily, bin->orig_bytes+offs+3);
-    i = load_ip_port(spec, i, bin->orig_bytes+offs+1);	      /* IP, Port */
+    alen = addrlen(desc->sfamily, data+3);
+    i = load_ip_address(spec, i, desc->sfamily, data+3);
+    i = load_ip_port(spec, i, data+1);	      		      /* IP, Port */
     
+#   ifdef HAVE_SYS_UN_H
+    /* AF_LOCAL addresses have a prefix byte containing address length */
+    if (desc->sfamily == AF_LOCAL)
+	alen++;
+#   endif
     offs += (alen + 3);
     len  -= (alen + 3);
 
@@ -4150,6 +4179,16 @@ static char* inet_set_address(int family, inet_address* dst,
 	return src + 2+16;
     }
 #endif
+#ifdef HAVE_SYS_UN_H
+    else if ((family == AF_LOCAL) && (*len >= 3+sizeof(struct sockaddr_un))) {
+	int n = *((unsigned char*)src+2);
+	dst->sal.sun_family  = family;
+	sys_memcpy(dst->sal.sun_path, src+3, n);
+	dst->sal.sun_path[n-1] = '\0';
+	*len = n;
+	return src + 3 + n;
+    }
+#endif
     return NULL;
 }
 
@@ -4158,7 +4197,7 @@ static char* inet_set_address(int family, inet_address* dst,
 ** or from argument if source data specifies constant address.
 ** 
 ** src = [TAG,P1,P0]           when TAG = INET_AF_ANY  | INET_AF_LOOPBACK
-** src = [TAG,P1,P0,X1,X2,...] when TAG = INET_AF_INET | INET_AF_INET6
+** src = [TAG,P1,P0,X1,X2,...] when TAG = INET_AF_INET | INET_AF_INET6 | INET_AF_LOCAL
 */
 static char *inet_set_faddress(int family, inet_address* dst,
 			       char *src, ErlDrvSizeT* len) {
@@ -4176,6 +4215,21 @@ static char *inet_set_faddress(int family, inet_address* dst,
 	family = AF_INET6;
 	break;
 #   endif
+#   ifdef HAVE_SYS_UN_H
+    case INET_AF_LOCAL: {
+	int n;
+	if (*len || *len < 3) return NULL;
+	family = AF_LOCAL;
+	/* Next two bytes are the length of the local path (< 256) */
+	src++;
+	n = *(unsigned char*)src++;
+	if (n+3 > *len) return NULL;
+	dst->sal.sun_family = family;
+	sys_memcpy(dst->sal.sun_path, src, n);
+	*len = n;
+	break;
+    }
+#   endif
     case INET_AF_ANY:
     case INET_AF_LOOPBACK: {
 	int port;
@@ -4239,7 +4293,6 @@ static char *inet_set_faddress(int family, inet_address* dst,
     return inet_set_address(family, dst, src, len);
 }
 
-
 /* Get a inaddr structure
 ** src = inaddr structure
 ** *len is the lenght of structure
@@ -4272,9 +4325,54 @@ static int inet_get_address(char* dst, inet_address* src, unsigned int* len)
 	return 0;
     }
 #endif
+#ifdef HAVE_SYS_UN_H
+    else if ((family == AF_LOCAL) && *len > 0) {
+	int n = *len - 4;
+	dst[0] = INET_AF_LOCAL;
+	put_int16(0, dst+1);
+	if (n == 0 || n >= sizeof(src->sal.sun_path)) {
+	    *(dst+3) = 0;
+	    *len = 3+1;
+        } else {
+	    *(dst+3) = n;
+	    sys_memcpy(dst+4, src->sal.sun_path, n);
+	    *len = 3+1+n;
+	}
+	return 0;
+    }
+#endif
     return -1;
 }
 
+static int inet_family_get_address(inet_descriptor* desc, char* dst, inet_address* src, unsigned int* len)
+{
+#ifdef HAVE_SYS_UN_H
+    if (desc->sfamily == AF_LOCAL) {
+	int n = *len - 4;
+	dst[0] = INET_AF_LOCAL;
+	put_int16(0, dst+1);
+	if (n <= 0 || n >= sizeof(src->sal.sun_path)) {
+	    if (desc->name_ptr) {
+		char* p = desc->name_ptr->sal.sun_path;
+		n = strlen(p);
+                *(dst+3) = n;
+                sys_memcpy(dst+4, p, n);
+		*len = 3+1+n;
+	    } else {
+		*(dst+3) = 0;
+		*len = 3+1;
+	    }
+        } else {
+	    *(dst+3) = n;
+	    sys_memcpy(dst+4, src->sal.sun_path, n);
+	    *len = 3+1+n;
+	}
+	return 0;
+    }
+#endif
+    return inet_get_address(dst, src, len);
+}
+
 /* Same as the above, but take family from the address structure,
 ** and advance the address pointer to the next address
 ** according to the size of the current,
@@ -4305,6 +4403,19 @@ static int inet_address_to_erlang(char *dst, inet_address **src) {
 	(*src) = (inet_address *) (&(*src)->sai6 + 1);
 	return 1 + 2 + 16;
 #endif
+#ifdef HAVE_SYS_UN_H
+    case AF_LOCAL: {
+	int n = strlen((*src)->sal.sun_path);
+	if (dst) {
+	    dst[0] = INET_AF_LOCAL;
+	    put_int16(0, dst+1);
+	    *(dst+3) = n;
+            sys_memcpy(dst+1+2+1, (*src)->sal.sun_path, n);
+	}
+	(*src) = (inet_address *) (&(*src)->sal + 1);
+	return 1+2+1+n;
+    }
+#endif
     default:
 	return -1;
     }
@@ -4580,6 +4691,13 @@ static ErlDrvSSizeT inet_ctl_fdopen(inet_descriptor* desc, int domain, int type,
             return ctl_error(sock_errno(), rbuf, rsize);
         if (name.sa.sa_family != domain)
             return ctl_error(EINVAL, rbuf, rsize);
+#ifdef HAVE_SYS_UN_H
+        if (domain == AF_LOCAL) {
+            sys_memcpy(&desc->name_addr, &name, sizeof(desc->name_addr));
+            if (desc->name_ptr == NULL)
+               desc->name_ptr = &desc->name_addr;
+        }
+#endif
     }
 #ifdef __OSE__        
     /* for fdopen duplicating the sd will allow to uniquely identify
@@ -6276,6 +6394,12 @@ static int inet_set_opts(inet_descriptor* desc, char* ptr, int len)
 	    }
 	    continue;
 
+    case INET_LOPT_LINE_DELIM:
+        DEBUGF(("inet_set_opts(%ld): s=%d, LINE_DELIM=%d\r\n",
+            (long)desc->port, desc->s, ival));
+        desc->delimiter = (char)ival;
+        continue;
+
 	case INET_OPT_REUSEADDR: 
 #ifdef __WIN32__
 	    continue;  /* Bjorn says */
@@ -8371,6 +8495,7 @@ static ErlDrvData inet_start(ErlDrvPort port, int size, int protocol)
     desc->deliver = INET_DELIVER_TERM; /* standard term format */
     desc->active  = INET_PASSIVE;      /* start passive */
     desc->active_count = 0;
+    desc->delimiter    = '\n';         /* line delimiting char */
     desc->oph = NULL;
     desc->opt = NULL;
 
@@ -8561,6 +8686,11 @@ static ErlDrvSSizeT inet_ctl(inet_descriptor* desc, int cmd, char* buf,
 	    put_int32(INET_AF_INET6, &tbuf[0]);
 	}
 #endif
+#ifdef HAVE_SYS_UN_H
+	else if (desc->sfamily == AF_LOCAL) {
+	    put_int32(INET_AF_LOCAL, &tbuf[0]);
+	}
+#endif
 	else
 	    return ctl_error(EINVAL, rbuf, rsize);
 
@@ -9246,6 +9376,11 @@ static ErlDrvSSizeT tcp_inet_ctl(ErlDrvData e, unsigned int cmd,
 	    return ctl_xerror("eafnosupport", rbuf, rsize);
 	    break;
 #endif
+#ifdef HAVE_SYS_UN_H
+	case INET_AF_LOCAL:
+	    domain = AF_LOCAL;
+	    break;
+#endif
 	default:
 	    return ctl_error(EINVAL, rbuf, rsize);
 	}
@@ -9882,7 +10017,7 @@ static int tcp_remain(tcp_descriptor* desc, int* len)
 
     tlen = packet_get_length(desc->inet.htype, ptr, n, 
                              desc->inet.psize, desc->i_bufsz,
-                             &desc->http_state);
+                             desc->inet.delimiter, &desc->http_state);
 
     DEBUGF(("tcp_remain(%ld): s=%d, n=%d, nfill=%d nsz=%d, tlen %d\r\n",
 	    (long)desc->inet.port, desc->inet.s, n, nfill, nsz, tlen));
@@ -11334,6 +11469,9 @@ static ErlDrvSSizeT packet_inet_ctl(ErlDrvData e, unsigned int cmd, char* buf,
 	    return ctl_xerror("eafnosupport", rbuf, rsize);
 	    break;
 #endif
+#ifdef HAVE_SYS_UN_H
+	case INET_AF_LOCAL: af = AF_LOCAL; break;
+#endif
 	default:
 	    return ctl_error(EINVAL, rbuf, rsize);
 	}
@@ -11945,7 +12083,7 @@ static int packet_inet_input(udp_descriptor* udesc, HANDLE event)
 
 	    inet_input_count(desc, n);
 	    udesc->i_ptr += n;
-	    inet_get_address(abuf, &other, &len);
+	    inet_family_get_address(desc, abuf, &other, &len);
 	    /* Copy formatted address to the buffer allocated; "len" is the
 	       actual length which must be <= than the original reserved.
 	       This means that the addr + data in the buffer are contiguous,
diff --git a/erts/preloaded/src/prim_file.erl b/erts/preloaded/src/prim_file.erl
index c87b264..8f1d0da 100644
--- a/erts/preloaded/src/prim_file.erl
+++ b/erts/preloaded/src/prim_file.erl
@@ -138,6 +138,7 @@
 %% Options
 -define(FILE_OPT_DELAYED_WRITE, 0).
 -define(FILE_OPT_READ_AHEAD,    1).
+-define(FILE_OPT_DELIMITER,     2).
 
 %% IPREAD variants
 -define(IPREAD_S32BU_P32BU, 0).
@@ -1239,6 +1240,10 @@ open_mode([{read_ahead, Size}|Rest], Mode, Portopts, Setopts)
 	true ->
 	    einval
     end;
+open_mode([{line_delimiter, Char}|Rest], Mode, Portopts, Setopts)
+  when is_integer(Char), 0 =< Char, Char =< 255 ->
+    open_mode(Rest, Mode, Portopts,
+          [<<?FILE_SETOPT, ?FILE_OPT_DELIMITER, Char>> | Setopts]);
 open_mode([], Mode, Portopts, Setopts) ->
     {Mode, reverse(Portopts), reverse(Setopts)};
 open_mode(_, _Mode, _Portopts, _Setopts) ->
diff --git a/erts/preloaded/src/prim_inet.erl b/erts/preloaded/src/prim_inet.erl
index 4d04e1d..688131a 100644
--- a/erts/preloaded/src/prim_inet.erl
+++ b/erts/preloaded/src/prim_inet.erl
@@ -70,6 +70,8 @@ open(Protocol, Family, Type) ->
 open(Protocol, Family, Type, Opts) ->
     open(Protocol, Family, Type, Opts, ?INET_REQ_OPEN, []).
 
+%% FDOPEN(tcp|udp|sctp, inet|inet6|local, stream|dgram|seqpacket, integer())
+
 fdopen(Protocol, Family, Type, Fd) when is_integer(Fd) ->
     fdopen(Protocol, Family, Type, Fd, true).
 
@@ -104,8 +106,9 @@ open(Protocol, Family, Type, Opts, Req, Data) ->
 	error:system_limit -> {error, system_limit}
     end.
 
-enc_family(inet) -> ?INET_AF_INET;
-enc_family(inet6) -> ?INET_AF_INET6.
+enc_family(inet)  -> ?INET_AF_INET;
+enc_family(inet6) -> ?INET_AF_INET6;
+enc_family(local) -> ?INET_AF_LOCAL.
 
 enc_type(stream) -> ?INET_TYPE_STREAM;
 enc_type(dgram) -> ?INET_TYPE_DGRAM;
@@ -1147,6 +1150,7 @@ enc_opt(packet_size)     -> ?INET_LOPT_PACKET_SIZE;
 enc_opt(read_packets)    -> ?INET_LOPT_READ_PACKETS;
 enc_opt(netns)           -> ?INET_LOPT_NETNS;
 enc_opt(show_econnreset) -> ?INET_LOPT_TCP_SHOW_ECONNRESET;
+enc_opt(line_delimiter)  -> ?INET_LOPT_LINE_DELIM;
 enc_opt(raw)             -> ?INET_OPT_RAW;
 % Names of SCTP opts:
 enc_opt(sctp_rtoinfo)	 	   -> ?SCTP_OPT_RTOINFO;
@@ -1205,6 +1209,7 @@ dec_opt(?INET_LOPT_PACKET_SIZE)      -> packet_size;
 dec_opt(?INET_LOPT_READ_PACKETS)     -> read_packets;
 dec_opt(?INET_LOPT_NETNS)           -> netns;
 dec_opt(?INET_LOPT_TCP_SHOW_ECONNRESET) -> show_econnreset;
+dec_opt(?INET_LOPT_LINE_DELIM)      -> line_delimiter;
 dec_opt(?INET_OPT_RAW)              -> raw;
 dec_opt(I) when is_integer(I)     -> undefined.
 
@@ -1287,6 +1292,7 @@ type_opt_1(packet) ->
 	   {httph_bin,?TCP_PB_HTTPH_BIN},
 	   {ssl, ?TCP_PB_SSL_TLS}, % obsolete
 	   {ssl_tls, ?TCP_PB_SSL_TLS}]};
+type_opt_1(line_delimiter)  -> int;
 type_opt_1(mode) ->
     {enum,[{list, ?INET_MODE_LIST},
 	   {binary, ?INET_MODE_BINARY}]};
@@ -1616,6 +1622,8 @@ enc_value_2(addr, {IP,Port}) when tuple_size(IP) =:= 4 ->
     [?INET_AF_INET,?int16(Port)|ip4_to_bytes(IP)];
 enc_value_2(addr, {IP,Port}) when tuple_size(IP) =:= 8 ->
     [?INET_AF_INET6,?int16(Port)|ip6_to_bytes(IP)];
+enc_value_2(addr, {File,0}) when is_list(File) ->
+    [?INET_AF_LOCAL,0,0,length(File)|File];
 enc_value_2(ether, [_,_,_,_,_,_]=Xs) -> Xs;
 enc_value_2(sockaddr, any) ->
     [?INET_AF_ANY];
@@ -1625,6 +1633,8 @@ enc_value_2(sockaddr, IP) when tuple_size(IP) =:= 4 ->
     [?INET_AF_INET|ip4_to_bytes(IP)];
 enc_value_2(sockaddr, IP) when tuple_size(IP) =:= 8 ->
     [?INET_AF_INET6|ip6_to_bytes(IP)];
+enc_value_2(sockaddr, File) when is_list(File) ->
+    [?INET_AF_LOCAL,0,0,length(File)|File];
 enc_value_2(linkaddr, Linkaddr) ->
     [?int16(length(Linkaddr)),Linkaddr];
 enc_value_2(sctp_assoc_id, Val) -> ?int32(Val);
@@ -2262,8 +2272,10 @@ get_addrs([F,P1,P0|Addr]) ->
     {IP,Addrs} = get_ip(F, Addr),
     [{IP,?u16(P1, P0)}|get_addrs(Addrs)].
 
-get_ip(?INET_AF_INET, Addr)  -> get_ip4(Addr);
-get_ip(?INET_AF_INET6, Addr) -> get_ip6(Addr).
+get_ip(?INET_AF_INET,  Addr) -> get_ip4(Addr);
+get_ip(?INET_AF_INET6, Addr) -> get_ip6(Addr);
+get_ip(?INET_AF_LOCAL, [0])  -> {[], []};
+get_ip(?INET_AF_LOCAL, [N | Addr]) -> lists:split(N, Addr).
 
 get_ip4([A,B,C,D | T]) -> {{A,B,C,D},T}.
 
diff --git a/lib/kernel/doc/src/file.xml b/lib/kernel/doc/src/file.xml
index 4954568..ebcfa86 100644
--- a/lib/kernel/doc/src/file.xml
+++ b/lib/kernel/doc/src/file.xml
@@ -767,6 +767,12 @@
               less than, or even greater than <c>Size</c> bytes, no
               performance gain can be expected.</p>
           </item>
+          <tag><c>{line_delimiter, Delimiter}</c></tag>
+          <item>
+            <p>When file is opened in the <c>raw</c> mode, <c>Delimiter</c> tells
+              <c>read_line/1</c> to use the <c>Delimiter</c> character for line
+              delimitation.  Default value for <c>Delimiter</c> is <c>$\n</c></p>
+          </item>
           <tag><c>read_ahead</c></tag>
           <item>
             <p>The same as <c>{read_ahead, Size}</c> with a reasonable
diff --git a/lib/kernel/doc/src/gen_tcp.xml b/lib/kernel/doc/src/gen_tcp.xml
index 8d9f09c..fb6f033 100644
--- a/lib/kernel/doc/src/gen_tcp.xml
+++ b/lib/kernel/doc/src/gen_tcp.xml
@@ -131,6 +131,13 @@ do_recv(Sock, Bs) ->
             <p>Set up the socket for IPv6.</p>
           </item>
 
+		  <tag><c>local</c></tag>
+		  <item>
+            <p>Set up the socket for local address family. This option is only
+               valid together with <c>{fd, integer()}</c> when the file descriptor
+               is of local address family (e.g. a Unix Domain Socket)</p>
+          </item>
+
           <tag><c>{port, Port}</c></tag>
           <item>
             <p>Specify which local port number to use.</p>
diff --git a/lib/kernel/doc/src/gen_udp.xml b/lib/kernel/doc/src/gen_udp.xml
index 6f34aba..3b7ee9a 100644
--- a/lib/kernel/doc/src/gen_udp.xml
+++ b/lib/kernel/doc/src/gen_udp.xml
@@ -101,6 +101,13 @@
             <p>Set up the socket for IPv4.</p>
           </item>
 
+		  <tag><c>local</c></tag>
+		  <item>
+            <p>Set up the socket for local address family. This option is only
+               valid together with <c>{fd, integer()}</c> when the file descriptor
+               is of local address family (e.g. a Unix Domain Socket)</p>
+          </item>
+
 		  <tag><c>{udp_module, module()}</c></tag>
 		  <item> <p>
 				  Override which callback module is used. Defaults to
diff --git a/lib/kernel/doc/src/inet.xml b/lib/kernel/doc/src/inet.xml
index e5d7ce0..e6d418d 100644
--- a/lib/kernel/doc/src/inet.xml
+++ b/lib/kernel/doc/src/inet.xml
@@ -981,6 +981,11 @@ setcap cap_sys_admin,cap_sys_ptrace,cap_dac_read_search+epi beam.smp
 	    indicated length are accepted and not considered invalid due
 	    to internal buffer limitations.</p>
           </item>
+          <tag><c>{line_delimiter, Char}</c>(TCP/IP sockets)</tag>
+          <item>
+            <p>Sets the line delimiting character for line oriented protocols
+              (<c>line</c>). Default value is <c>$\n</c>.</p>
+          </item>
 
 		  <tag><c>{priority, Priority}</c></tag>
           <item> <p>Set the protocol-defined priority for all packets to be sent
diff --git a/lib/kernel/src/inet.erl b/lib/kernel/src/inet.erl
index da7f040..f4afe40 100644
--- a/lib/kernel/src/inet.erl
+++ b/lib/kernel/src/inet.erl
@@ -40,7 +40,7 @@
 
 -export([i/0, i/1, i/2]).
 
--export([getll/1, getfd/1, open/8, fdopen/6]).
+-export([getll/1, getfd/1, open/8, fdopen/6, getfamily/1]).
 
 -export([tcp_controlling_process/2, udp_controlling_process/2,
 	 tcp_close/1, udp_close/1]).
@@ -133,7 +133,7 @@
 		 'running' | 'multicast' | 'loopback']} |
       {'hwaddr', ether_address()}.
 
--type address_family() :: 'inet' | 'inet6'.
+-type address_family() :: 'inet' | 'inet6' | 'local'.
 -type socket_protocol() :: 'tcp' | 'udp' | 'sctp'.
 -type socket_type() :: 'stream' | 'dgram' | 'seqpacket'.
 -type stat_option() :: 
@@ -671,7 +671,7 @@ stats() ->
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 connect_options() ->
     [tos, priority, reuseaddr, keepalive, linger, sndbuf, recbuf, nodelay,
-     header, active, packet, packet_size, buffer, mode, deliver,
+     header, active, packet, packet_size, buffer, mode, deliver, line_delimiter,
      exit_on_close, high_watermark, low_watermark, high_msgq_watermark,
      low_msgq_watermark, send_timeout, send_timeout_close, delay_send, raw,
      show_econnreset].
@@ -710,6 +710,7 @@ con_opt([Opt | Opts], #connect_opts{} = R, As) ->
 	{tcp_module,_}  -> con_opt(Opts, R, As);
 	inet        -> con_opt(Opts, R, As);
 	inet6       -> con_opt(Opts, R, As);
+	local       -> con_opt(Opts, R#connect_opts { family = local }, As);
 	{netns,NS} ->
 	    BinNS = filename2binary(NS),
 	    case prim_inet:is_sockopt_val(netns, BinNS) of
@@ -721,6 +722,8 @@ con_opt([Opt | Opts], #connect_opts{} = R, As) ->
         {active,N} when is_integer(N), N < 32768, N >= -32768 ->
             NOpts = lists:keydelete(active, 1, R#connect_opts.opts),
             con_opt(Opts, R#connect_opts { opts = [{active,N}|NOpts] }, As);
+	{line_delimiter,C} when is_integer(C), C >= 0, C =< 255 ->
+	    con_add(line_delimiter, C, R, Opts, As);
 	{Name,Val} when is_atom(Name) -> con_add(Name, Val, R, Opts, As);
 	_ -> {error, badarg}
     end;
@@ -779,6 +782,7 @@ list_opt([Opt | Opts], #listen_opts{} = R, As) ->
 	{tcp_module,_}  -> list_opt(Opts, R, As);
 	inet         -> list_opt(Opts, R, As);
 	inet6        -> list_opt(Opts, R, As);
+	local        -> list_opt(Opts, R#listen_opts { family = local }, As);
 	{netns,NS} ->
 	    BinNS = filename2binary(NS),
 	    case prim_inet:is_sockopt_val(netns, BinNS) of
@@ -834,8 +838,9 @@ udp_opt([Opt | Opts], #udp_opts{} = R, As) ->
 	binary      ->  udp_add(mode, binary, R, Opts, As);
 	list        ->  udp_add(mode, list, R, Opts, As);
 	{udp_module,_} -> udp_opt(Opts, R, As);
-	inet        -> udp_opt(Opts, R, As);
-	inet6       -> udp_opt(Opts, R, As);
+	inet        ->  udp_opt(Opts, R, As);
+	inet6       ->  udp_opt(Opts, R, As);
+	local       ->  udp_opt(Opts, R#udp_opts { family = local }, As);
 	{netns,NS} ->
 	    BinNS = filename2binary(NS),
 	    case prim_inet:is_sockopt_val(netns, BinNS) of
@@ -1308,7 +1313,7 @@ fdopen(Fd, Addr, Port, Opts, Protocol, Family, Type, Module) ->
     Bound = Port == 0 andalso IsAnyAddr,
     case prim_inet:fdopen(Protocol, Family, Type, Fd, Bound) of
 	{ok, S} ->
-	    case prim_inet:setopts(S, Opts) of
+	    case prim_inet:setopts(S, Opts -- [local]) of
 		ok ->
                     case if
                              Bound ->
@@ -1335,6 +1340,13 @@ fdopen(Fd, Addr, Port, Opts, Protocol, Family, Type, Module) ->
 	Error -> Error
     end.
 
+-spec getfamily(list()) -> atom().
+getfamily(Options) when is_list(Options) ->
+    case lists:member(local, Options) of
+    true  -> local;
+    false -> inet
+    end.
+
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %%  socket stat
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
diff --git a/lib/kernel/src/inet_int.hrl b/lib/kernel/src/inet_int.hrl
index bfe4c9e..0a22012 100644
--- a/lib/kernel/src/inet_int.hrl
+++ b/lib/kernel/src/inet_int.hrl
@@ -29,6 +29,7 @@
 -define(INET_AF_INET6,        2).
 -define(INET_AF_ANY,          3). % Fake for ANY in any address family
 -define(INET_AF_LOOPBACK,     4). % Fake for LOOPBACK in any address family
+-define(INET_AF_LOCAL,        5). % For Unix Domain address family
 
 %% type codes to open and gettype - INET_REQ_GETTYPE
 -define(INET_TYPE_STREAM,     1).
@@ -149,6 +150,7 @@
 -define(INET_LOPT_MSGQ_LOWTRMRK,  37).
 -define(INET_LOPT_NETNS,          38).
 -define(INET_LOPT_TCP_SHOW_ECONNRESET, 39).
+-define(INET_LOPT_LINE_DELIM,     40).
 % Specific SCTP options: separate range:
 -define(SCTP_OPT_RTOINFO,	 	100).
 -define(SCTP_OPT_ASSOCINFO,	 	101).
@@ -377,7 +379,8 @@
 	{ 
 	  ifaddr = any,     %% bind to interface address
 	  port   = 0,       %% bind to port (default is dynamic port)
-	  fd      = -1,     %% fd >= 0 => already bound
+	  fd     = -1,      %% fd >= 0 => already bound
+	  family = inet,    %% address family
 	  opts   = []       %% [{active,true}] added in inet:connect_options
 	 }).
 
@@ -387,6 +390,7 @@
 	  port   = 0,                %% bind to port (default is dynamic port)
 	  backlog = ?LISTEN_BACKLOG, %% backlog
 	  fd      = -1,              %% %% fd >= 0 => already bound
+	  family = inet,             %% address family
 	  opts   = []                %% [{active,true}] added in 
 	                             %% inet:listen_options
 	 }).
@@ -396,6 +400,7 @@
 	  ifaddr = any,
 	  port   = 0,
 	  fd     = -1,
+	  family = inet,
 	  opts   = [{active,true}]
 	 }).
 
diff --git a/lib/kernel/src/inet_tcp.erl b/lib/kernel/src/inet_tcp.erl
index b5c758c..ca4dd20 100644
--- a/lib/kernel/src/inet_tcp.erl
+++ b/lib/kernel/src/inet_tcp.erl
@@ -94,9 +94,10 @@ do_connect({A,B,C,D}, Port, Opts, Time) when ?ip(A,B,C,D), ?port(Port) ->
 	{ok, #connect_opts{fd=Fd,
 			   ifaddr=BAddr={Ab,Bb,Cb,Db},
 			   port=BPort,
+			   family=Family,
 			   opts=SockOpts}}
 	when ?ip(Ab,Bb,Cb,Db), ?port(BPort) ->
-	    case inet:open(Fd,BAddr,BPort,SockOpts,tcp,inet,stream,?MODULE) of
+	    case inet:open(Fd,BAddr,BPort,SockOpts,tcp,Family,stream,?MODULE) of
 		{ok, S} ->
 		    case prim_inet:connect(S, {A,B,C,D}, Port, Time) of
 			ok    -> {ok,S};
@@ -116,9 +117,10 @@ listen(Port, Opts) ->
 	{ok, #listen_opts{fd=Fd,
 			  ifaddr=BAddr={A,B,C,D},
 			  port=BPort,
+			  family=Family,
 			  opts=SockOpts}=R}
 	when ?ip(A,B,C,D), ?port(BPort) ->
-	    case inet:open(Fd,BAddr,BPort,SockOpts,tcp,inet,stream,?MODULE) of
+	    case inet:open(Fd,BAddr,BPort,SockOpts,tcp,Family,stream,?MODULE) of
 		{ok, S} ->
 		    case prim_inet:listen(S, R#listen_opts.backlog) of
 			ok -> {ok, S};
@@ -151,4 +153,7 @@ accept(L,Timeout) ->
 %% Create a port/socket from a file descriptor 
 %%
 fdopen(Fd, Opts) ->
-    inet:fdopen(Fd, Opts, tcp, inet, stream, ?MODULE).
+    fdopen(Fd, inet:getfamily(Opts), Opts).
+
+fdopen(Fd, Family, Opts) ->
+    inet:fdopen(Fd, Opts, tcp, Family, stream, ?MODULE).
diff --git a/lib/kernel/src/inet_udp.erl b/lib/kernel/src/inet_udp.erl
index 5b2e512..74b2874 100644
--- a/lib/kernel/src/inet_udp.erl
+++ b/lib/kernel/src/inet_udp.erl
@@ -52,8 +52,9 @@ open(Port, Opts) ->
 	{ok, #udp_opts{fd=Fd,
 		       ifaddr=BAddr={A,B,C,D},
 		       port=BPort,
+		       family=Family,
 		       opts=SockOpts}} when ?ip(A,B,C,D), ?port(BPort) ->
-	    inet:open(Fd,BAddr,BPort,SockOpts,udp,inet,dgram,?MODULE);
+	    inet:open(Fd,BAddr,BPort,SockOpts,udp,Family,dgram,?MODULE);
 	{ok, _} -> exit(badarg)
     end.
 
@@ -92,9 +93,12 @@ controlling_process(Socket, NewOwner) ->
 %% Create a port/socket from a file descriptor 
 %%
 fdopen(Fd, Opts) ->
+    fdopen(Fd, inet:getfamily(Opts), Opts).
+
+fdopen(Fd, Family, Opts) ->
     inet:fdopen(Fd, 
 		optuniquify([{recbuf, ?RECBUF} | Opts]), 
-		udp, inet, dgram, ?MODULE).
+		udp, Family, dgram, ?MODULE).
 
 
 %% Remove all duplicate options from an option list.
diff --git a/lib/kernel/test/bif_SUITE.erl b/lib/kernel/test/bif_SUITE.erl
index c3840f3..dd30105 100644
--- a/lib/kernel/test/bif_SUITE.erl
+++ b/lib/kernel/test/bif_SUITE.erl
@@ -33,6 +33,7 @@
 	 spawn_failures/1,
 
 	 run_fun/1,
+     decode_packet_delim/1,
 	 wilderness/1]).
 
 -export([init_per_testcase/2, end_per_testcase/2]).
@@ -516,6 +517,15 @@ fetch_proc_vals(Pid) ->
     {value,{heap_size,HS}} = lists:keysearch(heap_size, 1, PI),
     ?line {Ls, P, FA, HS}.
      
+decode_packet_delim(doc) ->
+    ["Test erlang:packet_delim/3 with {line_delimiter,0} option"];
+decode_packet_delim(suite) ->
+    [];
+decode_packet_delim(Config) when is_list(Config) ->
+    {ok,<<"abc",0>>,<<"efg",0>>} =
+        erlang:decode_packet(line, <<"abc",0,"efg",0>>, [{line_delimiter, 0}]),
+    {more, undefined} = erlang:decode_packet(line, <<"abc",0,"efg",0>>, []).
+
 % This testcase should probably be moved somewhere else
 wilderness(doc) ->
     ["Test that memory allocation command line options affecting the"
diff --git a/lib/kernel/test/file_SUITE.erl b/lib/kernel/test/file_SUITE.erl
index 8856be3..fa3857d 100644
--- a/lib/kernel/test/file_SUITE.erl
+++ b/lib/kernel/test/file_SUITE.erl
@@ -84,7 +84,7 @@
 
 -export([large_file/1, large_write/1]).
 
--export([read_line_1/1, read_line_2/1, read_line_3/1,read_line_4/1]).
+-export([read_line_1/1, read_line_2/1, read_line_3/1,read_line_4/1,read_line_5/1]).
 
 -export([advise/1]).
 
@@ -4239,6 +4239,35 @@ read_line_4(Config) when is_list(Config) ->
 	    end || {_,File,_,Y} <- All , Y =:= fail],
     ?line read_line_remove_files(All),
     ok.
+read_line_5(suite) ->
+    [];
+read_line_5(doc) ->
+    ["read_line with custom line delimiter"];
+read_line_5(Config) when is_list(Config) ->
+    PrivDir = ?config(priv_dir, Config),
+    File    = filename:join(PrivDir, "read_line_test_delim.txt"),
+    file:delete(File),
+    ok      = file:write_file(File, <<"abc",0,"efg",0,"kkk">>),
+    {ok,F1} = file:open(File, [binary,raw,{line_delimiter, 0}]),
+    {ok,<<"abc",0>>} = file:read_line(F1),
+    {ok,<<"efg",0>>} = file:read_line(F1),
+    {ok,<<"kkk">>}   = file:read_line(F1),
+    eof              = file:read_line(F1),
+    ok      = file:close(F1),
+    ok      = file:write_file(File, <<"abcXefgXkkk">>),
+    {ok,F2} = file:open(File, [binary,raw,{line_delimiter, $X}]),
+    {ok,<<"abcX">>}  = file:read_line(F2),
+    {ok,<<"efgX">>}  = file:read_line(F2),
+    {ok,<<"kkk">>}   = file:read_line(F2),
+    eof              = file:read_line(F2),
+    ok      = file:close(F2),
+    ok      = file:write_file(File, <<"abc\nefg\nkkk">>),
+    {ok,F3} = file:open(File, [binary,raw]),
+    {ok,<<"abc\n">>} = file:read_line(F3),
+    {ok,<<"efg\n">>} = file:read_line(F3),
+    {ok,<<"kkk">>}   = file:read_line(F3),
+    eof              = file:read_line(F3),
+    ok      = file:close(F3).
 
 rl_lines() ->
     [ <<"hej">>,<<"hopp">>,<<"i">>,<<"lingon\rskogen">>].
diff --git a/lib/kernel/test/gen_tcp_api_SUITE.erl b/lib/kernel/test/gen_tcp_api_SUITE.erl
index a051d50..2febb1b 100644
--- a/lib/kernel/test/gen_tcp_api_SUITE.erl
+++ b/lib/kernel/test/gen_tcp_api_SUITE.erl
@@ -31,7 +31,7 @@
 	 init_per_testcase/2, end_per_testcase/2,
 	 t_connect_timeout/1, t_accept_timeout/1,
 	 t_connect_bad/1,
-	 t_recv_timeout/1, t_recv_eof/1,
+	 t_recv_timeout/1, t_recv_eof/1, t_recv_delim/1,
 	 t_shutdown_write/1, t_shutdown_both/1, t_shutdown_error/1,
 	 t_shutdown_async/1,
 	 t_fdopen/1, t_fdconnect/1, t_implicit_inet6/1]).
@@ -131,6 +131,21 @@ t_recv_eof(Config) when is_list(Config) ->
     ?line {error, closed} = gen_tcp:recv(Client, 0),
     ok.
 
+t_recv_delim(doc) -> "Test using message delimiter $X";
+t_recv_delim(suite) -> [];
+t_recv_delim(Config) when is_list(Config) ->
+    {ok, L} = gen_tcp:listen(0, []),
+    {ok, Port} = inet:port(L),
+    Opts = [{active,false},{packet,line},{line_delimiter,$X}],
+    {ok, Client} = gen_tcp:connect(localhost, Port, Opts),
+    {ok, A} = gen_tcp:accept(L),
+    ok = gen_tcp:send(A, "abcXefgX"),
+    {ok, "abcX"} = gen_tcp:recv(Client, 0, 0),
+    {ok, "efgX"} = gen_tcp:recv(Client, 0, 0),
+    ok = gen_tcp:close(Client),
+    ok = gen_tcp:close(A),
+    ok.
+
 %%% gen_tcp:shutdown/2
 
 t_shutdown_write(Config) when is_list(Config) ->
diff --git a/lib/sasl/src/alarm_handler.erl b/lib/sasl/src/alarm_handler.erl
index e428ba8..12358e5 100644
--- a/lib/sasl/src/alarm_handler.erl
+++ b/lib/sasl/src/alarm_handler.erl
@@ -60,7 +60,12 @@ clear_alarm(AlarmId) ->
 %% Returns: [{AlarmId, AlarmDesc}]
 %%-----------------------------------------------------------------
 get_alarms() ->
-    gen_event:call(alarm_handler, alarm_handler, get_alarms).
+    case gen_event:which_handlers(alarm_handler) of
+    [M | _] ->
+        gen_event:call(alarm_handler, M, get_alarms);
+    [] ->
+        []
+    end.
 
 add_alarm_handler(Module) when is_atom(Module) ->
     gen_event:add_handler(alarm_handler, Module, []).
diff --git a/lib/stdlib/src/edlin.erl b/lib/stdlib/src/edlin.erl
index 8c7a984..e8a01d3 100644
--- a/lib/stdlib/src/edlin.erl
+++ b/lib/stdlib/src/edlin.erl
@@ -89,6 +89,12 @@ edit_line1(Cs, {line,P,L,M}) ->
 
 edit([C|Cs], P, Line, {blink,_}, [_|Rs]) ->	%Remove blink here
     edit([C|Cs], P, Line, none, Rs);
+edit("\e[3~"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % `Del' key
+    edit([$\^D|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5D"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^<-  move left one word
+    edit([$B|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5C"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^->  move right one word
+    edit([$F|Cs], P, {Bef,Aft}, Prefix, Rs);
 edit([C|Cs], P, {Bef,Aft}, Prefix, Rs0) ->
     case key_map(C, Prefix) of
 	meta ->
@@ -196,7 +202,7 @@ key_map($\n, none) -> new_line;
 key_map($\^K, none) -> kill_line;
 key_map($\r, none) -> new_line;
 key_map($\^T, none) -> transpose_char;
-key_map($\^U, none) -> ctlu;
+key_map($\^U, none) -> kill_full_line;
 key_map($\^], none) -> auto_blink;
 key_map($\^X, none) -> ctlx;
 key_map($\^Y, none) -> yank;
@@ -229,6 +235,8 @@ key_map($\177, meta) -> backward_kill_word;
 key_map($[, meta) -> meta_left_sq_bracket;
 key_map($D, meta_left_sq_bracket) -> backward_char;
 key_map($C, meta_left_sq_bracket) -> forward_char;
+key_map($H, meta_left_sq_bracket) -> beginning_of_line; % Home key
+key_map($F, meta_left_sq_bracket) -> end_of_line;       % End key
 % support a few <CTRL>+<CURSOR LEFT|RIGHT> combinations...
 %  - forward:  \e\e[C, \e[5C, \e[1;5C
 %  - backward: \e\e[D, \e[5D, \e[1;5D
@@ -378,6 +386,9 @@ do_op(backward_kill_word, Bef0, Aft, Rs) ->
 do_op(kill_line, Bef, Aft, Rs) ->
     put(kill_buffer, Aft),
     {{Bef,[]},[{delete_chars,length(Aft)}|Rs]};
+do_op(kill_full_line, Bef, Aft, Rs) ->
+    put(kill_buffer, reverse(Bef)++Aft),
+    {{[],[]},[{delete_chars,-length(Bef)},{delete_chars,length(Aft)}|Rs]};
 do_op(yank, Bef, [], Rs) ->
     Kill = get(kill_buffer),
     {{reverse(Kill, Bef),[]},[{put_chars, unicode,Kill}|Rs]};
diff --git a/lib/syntax_tools/src/erl_prettypr.erl b/lib/syntax_tools/src/erl_prettypr.erl
index 81272e6..584cad9 100644
--- a/lib/syntax_tools/src/erl_prettypr.erl
+++ b/lib/syntax_tools/src/erl_prettypr.erl
@@ -682,10 +682,17 @@ lay_2(Node, Ctxt) ->
 
 	binary ->
 	    Ctxt1 = reset_prec(Ctxt),
-	    Es = seq(erl_syntax:binary_fields(Node),
-		     floating(text(",")), Ctxt1, fun lay/2),
+	    BinEls = erl_syntax:binary_fields(Node),
+	    Ints = lists:map(fun({integer,_,I}) -> I; (X) -> X end,
+	        [erl_syntax:binary_field_body(I) || I <- BinEls]),
+	    Es = case io_lib:printable_list(Ints) of
+	        true ->
+	            lay(erl_syntax:string(Ints), Ctxt1);
+	        false ->
+	            par(seq(BinEls, floating(text(",")), Ctxt1, fun lay/2))
+	    end,
 	    beside(floating(text("<<")),
-		   beside(par(Es), floating(text(">>"))));
+		   beside(Es, floating(text(">>"))));
 
 	binary_field ->
 	    Ctxt1 = set_prec(Ctxt, max_prec()),
