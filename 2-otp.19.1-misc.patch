--- a/lib/stdlib/src/edlin.erl.orig	2015-09-22 15:10:57.000000000 -0400
+++ b/lib/stdlib/src/edlin.erl	2015-09-29 14:22:35.285802266 -0400
@@ -89,6 +89,12 @@
 
 edit([C|Cs], P, Line, {blink,_}, [_|Rs]) ->	%Remove blink here
     edit([C|Cs], P, Line, none, Rs);
+edit("\e[3~"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % `Del' key
+    edit([$\^D|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5D"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^<-  move left one word
+    edit([$B|Cs], P, {Bef,Aft}, Prefix, Rs);
+edit("[1;5C"++Cs, P, {Bef,Aft}, Prefix, Rs) -> % ^->  move right one word
+    edit([$F|Cs], P, {Bef,Aft}, Prefix, Rs);
 edit([C|Cs], P, {Bef,Aft}, Prefix, Rs0) ->
     case key_map(C, Prefix) of
 	meta ->
@@ -196,7 +202,7 @@
 key_map($\^K, none) -> kill_line;
 key_map($\r, none) -> new_line;
 key_map($\^T, none) -> transpose_char;
-key_map($\^U, none) -> ctlu;
+key_map($\^U, none) -> kill_full_line;
 key_map($\^], none) -> auto_blink;
 key_map($\^X, none) -> ctlx;
 key_map($\^Y, none) -> yank;
@@ -378,6 +386,9 @@
 do_op(kill_line, Bef, Aft, Rs) ->
     put(kill_buffer, Aft),
     {{Bef,[]},[{delete_chars,length(Aft)}|Rs]};
+do_op(kill_full_line, Bef, Aft, Rs) ->
+    put(kill_buffer, reverse(Bef)++Aft),
+    {{[],[]},[{delete_chars,-length(Bef)},{delete_chars,length(Aft)}|Rs]};
 do_op(yank, Bef, [], Rs) ->
     Kill = get(kill_buffer),
     {{reverse(Kill, Bef),[]},[{put_chars, unicode,Kill}|Rs]};
--- a/lib/syntax_tools/src/erl_prettypr.erl.orig	2015-09-22 15:10:57.000000000 -0400
+++ b/lib/syntax_tools/src/erl_prettypr.erl	2015-09-29 14:22:35.285802266 -0400
@@ -682,10 +682,17 @@
 
 	binary ->
 	    Ctxt1 = reset_prec(Ctxt),
-	    Es = seq(erl_syntax:binary_fields(Node),
-		     floating(text(",")), Ctxt1, fun lay/2),
+	    BinEls = erl_syntax:binary_fields(Node),
+	    Ints = lists:map(fun({integer,_,I}) -> I; (X) -> X end,
+	        [erl_syntax:binary_field_body(I) || I <- BinEls]),
+	    Es = case io_lib:printable_list(Ints) of
+	        true ->
+	            lay(erl_syntax:string(Ints), Ctxt1);
+	        false ->
+	            par(seq(BinEls, floating(text(",")), Ctxt1, fun lay/2))
+	    end,
 	    beside(floating(text("<<")),
-		   beside(par(Es), floating(text(">>"))));
+		   beside(Es, floating(text(">>"))));
 
 	binary_field ->
 	    Ctxt1 = set_prec(Ctxt, max_prec()),
